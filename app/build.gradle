apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply from: "${rootProject.rootDir}/releaseinfo.gradle"


android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.dogoodsoft_app.lessismore"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8

        targetCompatibility JavaVersion.VERSION_1_8

    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    //引入okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.5.0'
    //引入retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    //引入rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.0.4'
    //引入rxjava适配器，方便rxjava与retrofit的结合
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    //引入json转换器，方便将返回的数据转换为json格式
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    //引入rxandroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    //glide
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    // ViewModel and LiveData
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    // alternatively, just ViewModel
    implementation 'android.arch.lifecycle:viewmodel:1.1.1'
    // alternatively, just LiveData
    implementation 'android.arch.lifecycle:livedata:1.1.1'
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"
    // Room (use 1.1.0-beta1 for latest beta)
    implementation 'android.arch.persistence.room:runtime:1.0.0'
    annotationProcessor "android.arch.persistence.room:compiler:1.0.0"
    // Paging
    implementation 'android.arch.paging:runtime:1.0.0-alpha7'
    // Test helpers for LiveData
    testImplementation 'android.arch.core:core-testing:1.1.1'
    // Test helpers for Room
    testImplementation 'android.arch.persistence.room:testing:1.0.0'
    implementation 'android.arch.lifecycle:common-java8:1.1.1'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'skin.support:skin-support:3.0.0'
    // skin-support 基础控件支持
    implementation 'skin.support:skin-support-design:3.0.0'
    // skin-support-design material design 控件支持[可选]
    implementation 'skin.support:skin-support-cardview:3.0.0'
    // skin-support-cardview CardView 控件支持[可选]
    implementation 'skin.support:skin-support-constraint-layout:3.0.0'
    implementation files('libs/tbs_sdk_thirdapp_v3.6.0.1183_43604_sharewithdownload_withoutGame_obfs_20180211_105126.jar')

    implementation 'tyrantgit:explosionfield:1.0.1'

    implementation 'com.google.dagger:dagger:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'

    api 'me.drakeet.materialdialog:library:1.3.1'

    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'

}

task helloTask(group:"important",description:"my study"){

    println 'fuking the world'
}
task  fuck(group:"important"){

    println 'fucking everything'
}

task handleReleaseFile2(){


    def srcFile = file('release.xml')
    def desDir = new File(this.buildDir,'generated/release/')

    doLast {

        println '开始解析对相应的xml文件'
        desDir.mkdir()
        def releases = new XmlParser().parse(srcFile)
        releases.release.each{

            releaseNode ->
                def name = releaseNode.versionName.text()
                def versioncode = releaseNode.versionCode.text()
                def versioninfo = releaseNode.versionInfo.text()
                //创建文件并写入节点数据

                def desFile = new File(desDir,"release-${name}.text")

                desFile.withWriter {
                    writer ->
                        writer.write("${name} -> ${versioncode} -> ${versioninfo}")
                }
        }
    }

}

task handleResultFileTest(dependsOn: handleReleaseFile2){

    def dir =  new File(this.buildDir,'generated/release/')

    doLast{

        dir.each{
            println('the file name is :'+it)
        }

        println('输出完成')

    }

}









